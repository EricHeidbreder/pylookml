#Required for V1:
TODO: finish project implementation -- Russ
TODO: write test cases for model parsising aand updating 
TODO: Name makes sense at some points and levels (KEYS_WITH_NAME_FIELDS = ("user_attribute_param", "param", "form_param", "option")) https://github.com/joshtemple/lkml/commit/676c214fcc0e0641eb353095c6b3de3232df1695
TODO: Sets
TODO: Actions -- Hugo
TODO: Constants
TODO: Access Grants -- Hugo
TODO: write additional simple round trip usecases for all the object types:
       * Explore, view, access_grant, model file, data groups, named value format, map layers ... 
TODO: Common Sql Functions added to the SQL paramter
TODO: Programatic Manipulation Tag / comment. Also remove tags
TODO: basic usecases documented -- readthedocs.io or something... 

###### V2 ########### 
TODO: parse manifest file
TODO: parse locale json file
TODO: internal optimizations: good abstractions, no unnecessary memory, better internal class structure / data strcuture  
TODO: better whitespace and style control
TODO: adding comment messages at the top of all object types: view, file, explore etc
TODO: documentation standards in code -- docstrings, function descriptions etc...

###### Post V2 #######
TODO: Boilerplate Code for this... [super view example...multi-model example...liveupdate service (lambda / cloud funcitons)]
TODO: Common Macros --> i.e. fast blocks 
        # Ideas:
        #  BigQuery table JSON auto creates the LookML
        #  Aggregate Awareness Macro
        #  Auto EAV Unnester
        #  Automatic Creation of NDT for pivot by rank type stuff
        #  Calendar Table
        #  SFDC Waterfall
        #  Guided Star Schema Generation?
        #  Multi Grain period over period 
        #  Drill to vis with constants
        #  Incremental PDTs? --> This breaks as of Looker 7?
        #  Negative Intervals Hacking
        #  Linking macro, Intel linking block?
        #  Fancy Conditional Formatting examples
        #  Something with slowly changing dimensions
TODO: Interactive block construction macro --> i.e. fast blocks 
TODO: Parse the Manifest file
TODO: Massive Documentation
TODO: Comprehensive and good unit tests
TODO: Common HTML Functions added to the HTML paramter
TODO: Ontology from the project.file.view.field? project.model.view.field? 
TODO: Preserve initial ordering?

Enhanecement: Make the internal datastructure of the class the JSON.... i.e. as the class state is modified so is the underlying json.
